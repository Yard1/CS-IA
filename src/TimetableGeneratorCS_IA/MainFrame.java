/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TimetableGeneratorCS_IA;

import TimetableGeneratorCS_IA.comboBoxModels.StudentsTableComboBoxModel;
import TimetableGeneratorCS_IA.comboBoxModels.SubjectsTableComboBoxModel;
import TimetableGeneratorCS_IA.tableModels.StudentsTableModel;
import TimetableGeneratorCS_IA.data.Subject;
import TimetableGeneratorCS_IA.data.Student;
import TimetableGeneratorCS_IA.data.SubjectButtonStorage;
import TimetableGeneratorCS_IA.data.Teacher;
import TimetableGeneratorCS_IA.data.SubjectGroup;
import TimetableGeneratorCS_IA.tableModels.SubjectsTableModel;
import TimetableGeneratorCS_IA.tableModels.TeachersTableModel;
import java.awt.*;
import java.awt.event.*;
import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.event.*;
import javax.swing.table.*;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

/**
 *
 * @author uczen
 */
public class MainFrame extends javax.swing.JFrame implements TableModelListener, ActionListener {

    private String[][] timetableStringMatrix;

    /**
     *
     */
    protected static String[] timetableColumnNames = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};

    // private String[][] studentsStringMatrix;
    /**
     *
     */
    protected static String[] studentsColumnNames = {"Name", "Surname", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject"};

    //private String[][] subjectsStringMatrix;
    /**
     *
     */
    protected static String[] subjectsColumnNames = {"Subject", "Teacher", "Hours"};

    //private String[][] teachersStringMatrix;
    /**
     *
     */
    protected static String[] teachersColumnNames = {"Name", "Surname"};

    /**
     *
     */
    protected static String[] timetableHours = {"", "7:30 - 8:15", "8:25 - 9:10", "9:20 - 10:05", "10:15 - 11:00", "11:20 - 12:05", "12:15 - 13:00", "13:10 - 13:55", "14:05 - 14:50", "15:00 - 15:45", "15:50 - 16:35", "16:45 - 17:30"};

    private TimetableGenerator TTGenerator = new TimetableGenerator();
    private ExcelTableGenerator ETGenerator = new ExcelTableGenerator(TTGenerator); //uses objects from TTGenerator 

    private int paneIdx = 0;
    private String movedSubjectName1 = "", movedSubjectName2 = "";
    private Subject movedSubject1, movedSubject2;
    private SubjectGroup movedSubjectSource1;
    private Boolean isBeingMoved = false;
    private ArrayList<SubjectButtonStorage> storageButtons = new ArrayList<>();
    private SubjectButtonStorage storageButton = null;
    private JButton tempButton;

    ArrayList<TableCellEditor> studentsJTableCellEditors = new ArrayList<>();
    TableCellEditor subjectsJTableEditor;

    JPopupMenu buttonPopupMenu;
    JButton popupButton;

    JComboBox subjectColumnComboBox = subjectColumnComboBoxCreator();
    JComboBox teacherColumnComboBox = teacherColumnComboBoxCreator();

    MouseListener popupListener = new PopupClickListener();

    JPanel hoursPanel = new JPanel();
    Dimension scrollSize = new Dimension((int) (Toolkit.getDefaultToolkit().getScreenSize().width / 6), (int) ((Toolkit.getDefaultToolkit().getScreenSize().height / 14.2) * 12));
    Dimension buttonSize = new Dimension((int) (Toolkit.getDefaultToolkit().getScreenSize().width / 6.8), (int) (Toolkit.getDefaultToolkit().getScreenSize().height / 14.2));
    Dimension panelSize = new Dimension((int) (Toolkit.getDefaultToolkit().getScreenSize().width / 16.6), (int) (Toolkit.getDefaultToolkit().getScreenSize().height / 14.2));

    /**
     * Creates new form TimetableFrame
     *
     * @throws java.io.IOException
     * @throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
     * @throws antonibaumia.TimetableGenerator.NoSuchSubjectException
     */
    public MainFrame() throws IOException, InvalidFormatException, TimetableGenerator.NoSuchSubjectException {
        //studentsStringMatrix = ETGenerator.getStudentsStringMatrix();
        //subjectsStringMatrix = ETGenerator.getSubjectssStringMatrix();
        //teachersStringMatrix = ETGenerator.getTeachersStringMatrix();
        createButtonPopupMenu();
        createHoursPanel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        addTablePopupMenuItem = new javax.swing.JMenuItem();
        deleteTablePopupMenuItem = new javax.swing.JMenuItem();
        mainTabbedPane = new javax.swing.JTabbedPane();
        timetablePanel = new javax.swing.JPanel();
        studentsPanel = new javax.swing.JPanel();
        studentsScrollPane = new javax.swing.JScrollPane();
        studentsJTable = new javax.swing.JTable();
        subjectsPanel = new javax.swing.JPanel();
        subjectsScrollPane = new javax.swing.JScrollPane();
        subjectsJTable = new javax.swing.JTable();
        teachersPanel = new javax.swing.JPanel();
        teachersScrollPane = new javax.swing.JScrollPane();
        teachersJTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();

        tablePopupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                tablePopupMenuPopupMenuWillBecomeVisible(evt);
            }
        });

        addTablePopupMenuItem.setText("Add...");
        addTablePopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTablePopupMenuItemActionPerformed(evt);
            }
        });
        tablePopupMenu.add(addTablePopupMenuItem);

        deleteTablePopupMenuItem.setText("Delete...");
        deleteTablePopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTablePopupMenuItemActionPerformed(evt);
            }
        });
        tablePopupMenu.add(deleteTablePopupMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);

        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        javax.swing.GroupLayout timetablePanelLayout = new javax.swing.GroupLayout(timetablePanel);
        timetablePanel.setLayout(timetablePanelLayout);
        timetablePanelLayout.setHorizontalGroup(
            timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );
        timetablePanelLayout.setVerticalGroup(
            timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Timetable", timetablePanel);
        timetablePanel.setLayout(new GridLayout (1, 0));
        try {
            createTimetable();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidFormatException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TimetableGenerator.NoSuchSubjectException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        studentsJTable.setModel(new StudentsTableModel(TTGenerator, studentsColumnNames));
        //studentsJTable.getModel().addTableModelListener(this);
        for(int i = 2; i < 8; i++){
            TableCellEditor editor = new DefaultCellEditor(subjectColumnComboBox);
            //editor.addCellEditorListener(new NewCellEditorListener());
            studentsJTableCellEditors.add(editor);
            studentsJTable.getColumnModel().getColumn(i).setCellEditor(editor);
        }
        studentsJTable.setComponentPopupMenu(tablePopupMenu);
        studentsScrollPane.setViewportView(studentsJTable);

        javax.swing.GroupLayout studentsPanelLayout = new javax.swing.GroupLayout(studentsPanel);
        studentsPanel.setLayout(studentsPanelLayout);
        studentsPanelLayout.setHorizontalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        studentsPanelLayout.setVerticalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Students", studentsPanel);

        subjectsJTable.setModel(new SubjectsTableModel(TTGenerator, subjectsColumnNames));
        //subjectsJTable.getModel().addTableModelListener(this);
        subjectsJTableEditor = new DefaultCellEditor(teacherColumnComboBox);
        subjectsJTable.getColumnModel().getColumn(1).setCellEditor(subjectsJTableEditor);
        subjectsJTable.setComponentPopupMenu(tablePopupMenu);
        subjectsScrollPane.setViewportView(subjectsJTable);

        javax.swing.GroupLayout subjectsPanelLayout = new javax.swing.GroupLayout(subjectsPanel);
        subjectsPanel.setLayout(subjectsPanelLayout);
        subjectsPanelLayout.setHorizontalGroup(
            subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        subjectsPanelLayout.setVerticalGroup(
            subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Subjects", subjectsPanel);

        teachersJTable.setModel(new TeachersTableModel(TTGenerator, teachersColumnNames));
        //teachersJTable.getModel().addTableModelListener(this);
        //teachersJTable.setComponentPopupMenu(tablePopupMenu);
        teachersScrollPane.setViewportView(teachersJTable);

        javax.swing.GroupLayout teachersPanelLayout = new javax.swing.GroupLayout(teachersPanel);
        teachersPanel.setLayout(teachersPanelLayout);
        teachersPanelLayout.setHorizontalGroup(
            teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teachersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        teachersPanelLayout.setVerticalGroup(
            teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teachersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Teachers", teachersPanel);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        if (evt.getSource() instanceof JTabbedPane) {
            JTabbedPane pane = (JTabbedPane) evt.getSource();
            paneIdx = pane.getSelectedIndex();
            isBeingMoved = false;
            if (subjectsJTableEditor != null) {
                subjectsJTableEditor.cancelCellEditing();
            }
            for (TableCellEditor e : studentsJTableCellEditors) {
                if (e != null) {
                    e.cancelCellEditing();
                }
            }
            switch (paneIdx) {
                case 0:
                    timetablePaneMenuCreator();
                    break;
                case 1:
                    studentsPaneMenuCreator();
                    break;
                case 2:
                    subjectsPaneMenuCreator();
                    break;
                case 3:
                    teachersPaneMenuCreator();
                    break;
            }
        }
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    private void deleteTablePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTablePopupMenuItemActionPerformed
        int idx;
        switch (paneIdx) {
            case 1:
                idx = studentsJTable.getSelectedRow();
                 {
                    try {
                        removeStudent(idx);
                    } catch (IOException | InvalidFormatException | TimetableGenerator.NoSuchSubjectException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
            case 2:
                idx = subjectsJTable.getSelectedRow();
                 {
                    try {
                        removeSubject(idx);
                    } catch (IOException | InvalidFormatException | TimetableGenerator.NoSuchSubjectException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            case 3:
                idx = teachersJTable.getSelectedRow();
                removeTeacher(idx);
                break;
        }
    }//GEN-LAST:event_deleteTablePopupMenuItemActionPerformed

    private void tablePopupMenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_tablePopupMenuPopupMenuWillBecomeVisible
        SwingUtilities.invokeLater(() -> {
            int rowAtPoint;
            switch (paneIdx) {
                case 1:
                    rowAtPoint = studentsJTable.rowAtPoint(SwingUtilities.convertPoint(tablePopupMenu, new Point(0, 0), studentsJTable));
                    if (rowAtPoint > -1) {
                        studentsJTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                    }
                    break;
                case 2:
                    rowAtPoint = subjectsJTable.rowAtPoint(SwingUtilities.convertPoint(tablePopupMenu, new Point(0, 0), subjectsJTable));
                    if (rowAtPoint > -1) {
                        subjectsJTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                    }
                    break;
                case 3:
                    rowAtPoint = teachersJTable.rowAtPoint(SwingUtilities.convertPoint(tablePopupMenu, new Point(0, 0), teachersJTable));
                    if (rowAtPoint > -1) {
                        teachersJTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                    }
                    break;
            }
        });    }//GEN-LAST:event_tablePopupMenuPopupMenuWillBecomeVisible

    private void addTablePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTablePopupMenuItemActionPerformed
        switch (paneIdx) {
            case 1:
                addStudent();
                break;
            case 2:
                addSubject();
                break;
            case 3:
                addTeacher();
                break;
        }

    }//GEN-LAST:event_addTablePopupMenuItemActionPerformed

    private void addButtonPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        //internal changes
        int[] indexes = getIndexFromButton(popupButton);
        TTGenerator.timetable[indexes[0]][indexes[1]].addSubject(TTGenerator.nullSubject);

        //graphical changes
        JButton jb = new JButton();
        jb.addActionListener(this);
        jb.addMouseListener(popupListener);
        popupButton.getParent().add(jb);
        jb.setName(Integer.toString(popupButton.getParent().getComponentCount() - 1));
        refreshComponentWithParents(popupButton, 3);
    }

    private void removeButtonPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        //internal changes
        int[] indexes = getIndexFromButton(popupButton);
        Subject s = TTGenerator.timetable[indexes[0]][indexes[1]].getSubjectAtIndex(Integer.parseInt(popupButton.getName()));
        TTGenerator.timetable[indexes[0]][indexes[1]].removeSubjectAtIndex(Integer.parseInt(popupButton.getName()));
        if (s != null) {
            SubjectButtonStorage ssb = storageButtons.stream().filter(x -> x.getSubject().equals(s)).findFirst().orElse(null);
            if (ssb != null) {
                ssb.setChargesLeft(ssb.getChargesLeft() + 1);
            }
        }

        //graphical changes
        JPanel parent = (JPanel) popupButton.getParent();
        if (parent.getComponentCount() > 1) {
            parent.remove(popupButton);
            refreshButtonNames(parent);
            refreshComponentWithParents(parent, 2);
        } else {
            popupButton.setText("");
        }
    }

    private JComboBox subjectColumnComboBoxCreator() {
        JComboBox comboBox = new JComboBox();
        //HelperFunctions.generateLog("subjectColumnComboBoxCreator", TTGenerator.getSubjects().size() +"");
        comboBox.setModel(new StudentsTableComboBoxModel(TTGenerator));
        return comboBox;
    }

    private JComboBox teacherColumnComboBoxCreator() {
        JComboBox comboBox = new JComboBox();
        comboBox.setModel(new SubjectsTableComboBoxModel(TTGenerator));
        return comboBox;
    }

    private void createButtonPopupMenu() {
        buttonPopupMenu = new JPopupMenu();
        JMenuItem addButtonPopupMenuItem = new JMenuItem();
        JMenuItem removeButtonPopupMenuItem = new JMenuItem();
        buttonPopupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            @Override
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }

            @Override
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }

            @Override
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                tablePopupMenuPopupMenuWillBecomeVisible(evt);
            }
        });

        addButtonPopupMenuItem.setText("Add...");
        addButtonPopupMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            addButtonPopupMenuItemActionPerformed(evt);
        });
        buttonPopupMenu.add(addButtonPopupMenuItem);
        removeButtonPopupMenuItem.setText("Remove...");
        removeButtonPopupMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            removeButtonPopupMenuItemActionPerformed(evt);
        });
        buttonPopupMenu.add(removeButtonPopupMenuItem);
    }

    private void refreshButtonNames(JPanel panel) {
        Component[] components = panel.getComponents();

        for (int i = 0; i < components.length; i++) {
            if (components[i] instanceof JButton) {
                components[i].setName(Integer.toString(i));
            }
        }
    }

    private int[] getIndexFromButton(JButton button) {
        int[] indexes = new int[2];
        String[] indexesInStr = button.getParent().getName().split(";");
        System.out.println("JPanel parent = " + indexesInStr[0] + " " + indexesInStr[1]);
        //System.out.println(button.getSize());
        indexes[0] = Integer.parseInt(indexesInStr[0]);
        indexes[1] = Integer.parseInt(indexesInStr[1]);

        return indexes;
    }

    private void refreshComponentWithParents(Component root, int parents) {
        Component component = root.getParent();
        //System.out.println(component.getSize() + "");
        component.repaint();
        component.revalidate();
        for (int i = 1; i < parents; i++) {
            component = component.getParent();
            //System.out.println(component.getSize() + "");
            component.repaint();
            component.revalidate();
        }
    }

    /**
     *
     * @param tme
     */
    @Override
    public void tableChanged(TableModelEvent tme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void createHoursPanel() {
        hoursPanel = new JPanel();
        hoursPanel.setBorder(BorderFactory.createEmptyBorder());
        hoursPanel.setLayout(new GridLayout(12, 1));
        JTextField jtf = new JTextField(timetableHours[0]);
        jtf.setBorder(BorderFactory.createEmptyBorder());
        jtf.setBackground(new Color(0, 0, 0, 0));
        jtf.setOpaque(false);
        jtf.setEditable(false);
        jtf.setHorizontalAlignment(JTextField.CENTER);
        hoursPanel.add(jtf);
        for (int i = 1; i < 12; i++) {
            JPanel jp2 = new JPanel();
            jp2.setPreferredSize(panelSize);
            jp2.setBorder(BorderFactory.createEmptyBorder());
            jp2.setLayout(new GridLayout(0, 1));
            JTextField jtf2 = new JTextField(timetableHours[i]);
            jtf2.setBorder(BorderFactory.createEmptyBorder());
            jtf2.setBackground(new Color(0, 0, 0, 0));
            jtf2.setOpaque(false);
            jtf2.setEditable(false);
            jtf2.setHorizontalAlignment(JTextField.CENTER);
            jp2.add(jtf2);
            hoursPanel.add(jp2);
        }
    }

    class PopupClickListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            if (e.isPopupTrigger()) {
                doPop(e);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (e.isPopupTrigger()) {
                doPop(e);
            }
        }

        private void doPop(MouseEvent e) {
            storageButton = null;
            tempButton = null;
            isBeingMoved = false;
            popupButton = (JButton) e.getComponent();
            if (popupButton.getParent().getComponentCount() < 2 && popupButton.getText().equalsIgnoreCase("")) {
                buttonPopupMenu.getComponent(1).setVisible(false);
            } else {
                buttonPopupMenu.getComponent(1).setVisible(true);
            }
            buttonPopupMenu.show(popupButton, e.getX(), e.getY());
        }
    }

    public Subject getSubjectFromTimetableViaButton(JButton button) {
        int[] indexes = getIndexFromButton(button);
        movedSubjectSource1 = TTGenerator.timetable[indexes[0]][indexes[1]];
        if (Integer.parseInt(button.getName()) < movedSubjectSource1.getSubjects().size()) {
            return movedSubjectSource1.getSubjects().get(Integer.parseInt(button.getName()));
        } else {
            return null;
        }
    }

    /**
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("isBeingMoved " + isBeingMoved);
        System.out.println(((JButton) e.getSource()).getText());
//        if (!storageButtons.contains((JButton) e.getSource())) {
//            System.out.println(getSubjectFromTimetableViaButton((JButton) e.getSource()).getSubjectName());
//        }
        if (!isBeingMoved) {
            tempButton = (JButton) e.getSource();
            isBeingMoved = true;
            if (tempButton instanceof SubjectButtonStorage) {
                movedSubject1 = ((SubjectButtonStorage) tempButton).getSubject();
                storageButton = (SubjectButtonStorage) tempButton;
                movedSubjectName1 = storageButton.getSubject().getSubjectName();
                System.out.println("STORAGE " + movedSubjectName1);
            } else {
                //internal changes
                movedSubject1 = getSubjectFromTimetableViaButton(tempButton);
                storageButton = null;
                //graphical changes
                movedSubjectName1 = tempButton.getText();
                System.out.println("NOT STORAGE " + movedSubjectName1);
            }

        } else {
            isBeingMoved = false;
            if (tempButton != (JButton) e.getSource()) {
                JButton tempButton2 = (JButton) e.getSource();
                if ((storageButton != null && tempButton2 instanceof SubjectButtonStorage) || (tempButton == tempButton2)) {
                    tempButton = null;
                    tempButton2 = null;
                    storageButton = null;
                } else if (storageButton != null) {
                    int[] indexes2 = getIndexFromButton(tempButton2);
                    System.out.println(storageButton.getChargesLeft() + "");
                    if (TTGenerator.timetable[indexes2[0]][indexes2[1]].checkSubject(movedSubject1) && storageButton.getChargesLeft() > 0) {
                        System.out.println("replaced SG size " + TTGenerator.timetable[indexes2[0]][indexes2[1]].getSubjects().size());
                        Subject replacedSubject = TTGenerator.timetable[indexes2[0]][indexes2[1]].getSubjectAtIndex(Integer.parseInt(tempButton2.getName()));
                        if (replacedSubject != null) {
                            System.out.println("replaced " + replacedSubject.getSubjectName());
                        }
                        SubjectButtonStorage tempStorageButton = storageButtons.stream().filter(x -> x.getSubject().equals(replacedSubject)).findFirst().orElse(null);
                        if (tempStorageButton != null) {
                            tempStorageButton.setChargesLeft(tempStorageButton.getChargesLeft() + 1);
                        }
                        TTGenerator.timetable[indexes2[0]][indexes2[1]].removeSubjectAtIndex(Integer.parseInt(tempButton2.getName()));
                        TTGenerator.timetable[indexes2[0]][indexes2[1]].addSubjectAtIndex(movedSubject1, Integer.parseInt(tempButton2.getName()));
                        System.out.println(TTGenerator.timetable[indexes2[0]][indexes2[1]].getSubjectAtIndex(0));
                        storageButton.setChargesLeft(storageButton.getChargesLeft() - 1);
                        tempButton2.setText(storageButton.getSubject().getSubjectName());
                    } else {
                        JOptionPane.showMessageDialog(this, "Can't move subject!", "Can't move subject!", JOptionPane.ERROR_MESSAGE);
                        storageButton = null;
                        tempButton = null;
                        tempButton2 = null;
                    }
                } else if (!(tempButton2 instanceof SubjectButtonStorage)) {
                    movedSubjectName2 = tempButton2.getText();

                    int[] indexes = getIndexFromButton(tempButton);
                    int[] indexes2 = getIndexFromButton(tempButton2);
                    movedSubject2 = getSubjectFromTimetableViaButton(tempButton2);

                    if ((TTGenerator.timetable[indexes[0]][indexes[1]].getSubjects().size() < 2 && TTGenerator.timetable[indexes2[0]][indexes2[1]].getSubjects().size() < 2) || (TTGenerator.timetable[indexes[0]][indexes[1]].checkSubject(movedSubject2) && TTGenerator.timetable[indexes2[0]][indexes2[1]].checkSubject(movedSubject1))) {
                        TTGenerator.timetable[indexes[0]][indexes[1]].removeSubjectAtIndex(Integer.parseInt(tempButton.getName()));
                        TTGenerator.timetable[indexes[0]][indexes[1]].addSubjectAtIndex(movedSubject2, Integer.parseInt(tempButton.getName()));
                        TTGenerator.timetable[indexes2[0]][indexes2[1]].removeSubjectAtIndex(Integer.parseInt(tempButton2.getName()));
                        //System.out.println(movedSubject1.getSubjectName());
                        TTGenerator.timetable[indexes2[0]][indexes2[1]].addSubjectAtIndex(movedSubject1, Integer.parseInt(tempButton2.getName()));
                        tempButton2.setText(movedSubjectName1);
                        tempButton.setText(movedSubjectName2);
                        //System.out.println(TTGenerator.timetable[indexes2[0]][indexes2[1]].getSubjects().size());
                    } else {
                        JOptionPane.showMessageDialog(this, "Can't move subject!", "Can't move subject!", JOptionPane.ERROR_MESSAGE);
                        storageButton = null;
                        tempButton = null;
                        tempButton2 = null;
                    }
                }
//            else {
//                 int[] indexes = getIndexFromButton(tempButton);
//                storageButton = storageButtons.stream().filter(x -> TTGenerator.timetable[indexes[0]][indexes[1]].getSubjects().contains(x.getSubject())).findFirst().orElse(null);
//                if(storageButton != null){
//                    storageButton.setChargesLeft(storageButton.getChargesLeft() + 1);
//                    TTGenerator.timetable[indexes[0]][indexes[1]].removeSubject(storageButton.getSubject());
//                    tempButton.setText("");
//                }
//            }
            }
        }
    }

    private void timetablePaneMenuCreator() {
        menuBar.removeAll();

        javax.swing.JMenu editMenu = new JMenu();
        javax.swing.JMenu fileMenu = new JMenu();
        javax.swing.JMenuItem saveFileMenuItem = new JMenuItem();
        javax.swing.JMenuItem regenerateTimetableEditMenuItem = new JMenuItem();

        fileMenu.setText("File");

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setText("Save to .xlsx");
        saveFileMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                ETGenerator.saveStringMatrixToExcel("Timetable.xlsx", timetableColumnNames, TTGenerator.getStringTimetable());
            } catch (IOException | InvalidFormatException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        fileMenu.add(saveFileMenuItem);

        menuBar.add(fileMenu);
        editMenu.setText("Edit");

        regenerateTimetableEditMenuItem.setText("Regenerate timetable");
        regenerateTimetableEditMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                createTimetable();
            } catch (IOException | InvalidFormatException | TimetableGenerator.NoSuchSubjectException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        editMenu.add(regenerateTimetableEditMenuItem);
        menuBar.add(editMenu);
    }

    private void studentsPaneMenuCreator() {
        menuBar.removeAll();

        javax.swing.JMenu editMenu = new JMenu();
        javax.swing.JMenu fileMenu = new JMenu();
        javax.swing.JMenuItem saveFileMenuItem = new JMenuItem();
        javax.swing.JMenuItem addStudentEditMenuItem = new JMenuItem();

        fileMenu.setText("File");

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setText("Save to .xlsx");
        saveFileMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                ETGenerator.saveStringMatrixToExcel("Students.xlsx", studentsColumnNames, ETGenerator.getStudentsStringMatrix());
            } catch (IOException | InvalidFormatException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        fileMenu.add(saveFileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addStudentEditMenuItem.setText("Add Student...");
        addStudentEditMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            addStudent();
        });
        editMenu.add(addStudentEditMenuItem);

        menuBar.add(editMenu);
    }

    private void teachersPaneMenuCreator() {
        menuBar.removeAll();

        javax.swing.JMenu editMenu = new JMenu();
        javax.swing.JMenu fileMenu = new JMenu();
        javax.swing.JMenuItem saveFileMenuItem = new JMenuItem();
        javax.swing.JMenuItem addTeacherEditMenuItem = new JMenuItem();

        fileMenu.setText("File");

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setText("Save to .xlsx");
        saveFileMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                ETGenerator.saveStringMatrixToExcel("Teachers.xlsx", teachersColumnNames, ETGenerator.getTeachersStringMatrix());
            } catch (IOException | InvalidFormatException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        fileMenu.add(saveFileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addTeacherEditMenuItem.setText("Add Teacher...");
        addTeacherEditMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            addTeacher();
        });
        editMenu.add(addTeacherEditMenuItem);

        menuBar.add(editMenu);
    }

    private void addTeacher() {
        TTGenerator.addTeacher(new Teacher());
        refreshTeachersJTable();
    }

    private void addStudent() {
        TTGenerator.addStudent(new Student());
        refreshStudentsJTable();
    }

    private void addSubject() {
        TTGenerator.addSubject(new Subject());
        refreshSubjectsJTable();
    }

    private void removeTeacher(int idx) {
        if (idx < 0) {
            return;
        }
        int n = JOptionPane.NO_OPTION;
        if (TTGenerator.checkIfTeacherUsed(idx)) {
            n = itemUsedWarningPopup();
        } else {
            n = JOptionPane.YES_OPTION;
        }
        if (n == JOptionPane.YES_OPTION) {
            TTGenerator.removeTeacher(idx);
            refreshTeachersJTable();
            refreshSubjectsJTable();
        }
    }

    private void removeStudent(int idx) throws IOException, InvalidFormatException, TimetableGenerator.NoSuchSubjectException {
        if (idx < 0) {
            return;
        }
        int n = -1;
        if (TTGenerator.checkIfStudentUsed(idx)) {
            n = itemUsedWarningPopup();
        } else {
            n = JOptionPane.YES_OPTION;
        }
        if (n == JOptionPane.YES_OPTION) {
            if (TTGenerator.removeStudent(idx)) {
                createTimetable();
            }
            refreshStudentsJTable();
        }
    }

    private void removeSubject(int idx) throws IOException, InvalidFormatException, TimetableGenerator.NoSuchSubjectException {
        if (idx < 0) {
            return;
        }
        int n = -1;
        if (TTGenerator.checkIfSubjectUsed(idx)) {
            n = itemUsedWarningPopup();
        } else {
            n = JOptionPane.YES_OPTION;
        }
        if (n == JOptionPane.YES_OPTION) {
            if (TTGenerator.removeSubject(idx)) {
                createTimetable();
            }
            refreshSubjectsJTable();
            refreshStudentsJTable();
        }
    }

    private void createTimetable() throws IOException, InvalidFormatException, TimetableGenerator.NoSuchSubjectException {
        TTGenerator.generateTimetable(false); //generate timetable without reloading the files
        timetablePanel.removeAll(); //clean slate

        JPanel panel = new JPanel();
        panel.setBorder(BorderFactory.createEmptyBorder());
        panel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));
        panel.add(hoursPanel);
        JPanel tablePanel = new JPanel();
        for (int i = 0; i < 5; i++) {
            JPanel jp1 = new JPanel();
            jp1.setBorder(BorderFactory.createLineBorder(Color.lightGray));
            jp1.setLayout(new GridLayout(12, 1));
            JTextField jtf3 = new JTextField(timetableColumnNames[i]);
            jtf3.setBorder(BorderFactory.createEmptyBorder());
            jtf3.setBackground(new Color(0, 0, 0, 0));
            jtf3.setOpaque(false);
            jtf3.setEditable(false);
            jtf3.setHorizontalAlignment(JTextField.CENTER);
            jp1.add(jtf3);
            for (int j = 0; j < 11; j++) {
                JPanel jp2 = new JPanel();
                jp2.setPreferredSize(buttonSize);
                jp2.setName(j + ";" + i);
                jp2.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
                jp2.setLayout(new GridLayout(0, 1));
                JButton jb = new JButton();
                jb.addActionListener(this);
                jb.addMouseListener(popupListener);
                if (!TTGenerator.timetable[j][i].getSubjects().isEmpty()) {
                    for (Subject s : TTGenerator.timetable[j][i].getSubjects()) {
                        //names are used to store the index of the Subject in SubjectGroup
                        jb = new JButton();
                        jb.addActionListener(this);
                        jb.addMouseListener(popupListener);
                        int counter = 0;
                        jb.setText(s.getSubjectName());
                        jb.setName(Integer.toString(counter));
                        jp2.add(jb);
                        counter++;
                    }
                } else {
                    //if there are no Subjects in SubjectGroup
                    jb.setText("");
                    jb.setName("0");
                    jp2.add(jb);
                }
                jp1.add(jp2);
            }
            tablePanel.add(jp1);
        }
        panel.add(tablePanel);
        JPanel jpl = new JPanel();
        jpl.setLayout(new BorderLayout());
        JPanel jpl2 = new JPanel();
        jpl2.setLayout(new GridLayout(0, 1));
        ArrayList<Subject> subjects = TTGenerator.getTimetableSubjects();
        storageButtons.clear();
        for (Subject s : subjects) {
            SubjectButtonStorage jb = new SubjectButtonStorage(s.getSubjectName() + " x" + s.getHours());
            jb.setPreferredSize(buttonSize);
            jb.setSubject(s);
            for (SubjectGroup[] timetable1 : TTGenerator.timetable) {
                for (int j = 0; j < TTGenerator.timetable[0].length; j++) {
                    for (Subject s2 : timetable1[j].getSubjects()) {
                        if (jb.getSubject().equals(s2)) {
                            jb.setChargesLeft(jb.getChargesLeft() - 1);
                        }
                    }
                }
            }
            storageButtons.add(jb);
            jb.addActionListener(this);
            jpl2.add(jb);
        }
        JScrollPane jsp = new JScrollPane(jpl2);
        jsp.setPreferredSize(scrollSize);
        jpl.add(jsp, BorderLayout.PAGE_START);
        panel.add(jpl);
        timetablePanel.add(panel);
        timetablePanel.invalidate();
    }

    private void refreshStudentsJTable() {
        ((StudentsTableModel) studentsJTable.getModel()).fireTableDataChanged();
        //studentsJTable.setComponentPopupMenu(tablePopupMenu);
        studentsJTable.invalidate();
    }

    private void refreshTeachersJTable() {
        ((TeachersTableModel) teachersJTable.getModel()).fireTableDataChanged();
        teachersJTable.invalidate();
    }

    private void subjectsPaneMenuCreator() {
        menuBar.removeAll();

        javax.swing.JMenu editMenu = new JMenu();
        javax.swing.JMenu fileMenu = new JMenu();
        javax.swing.JMenuItem saveFileMenuItem = new JMenuItem();
        javax.swing.JMenuItem addStudentEditMenuItem = new JMenuItem();

        fileMenu.setText("File");

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setText("Save to .xlsx");
        saveFileMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                ETGenerator.saveStringMatrixToExcel("Subjects.xlsx", subjectsColumnNames, ETGenerator.getSubjectsStringMatrix());
            } catch (IOException | InvalidFormatException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        fileMenu.add(saveFileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addStudentEditMenuItem.setText("Add Subject...");
        addStudentEditMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
            addSubject();
        });
        editMenu.add(addStudentEditMenuItem);

        menuBar.add(editMenu);
    }

    private void refreshSubjectsJTable() {
        ((SubjectsTableModel) subjectsJTable.getModel()).fireTableDataChanged();
        subjectsJTable.invalidate();
    }

    private int itemUsedWarningPopup() {
        return JOptionPane.showConfirmDialog(
                this,
                "This item is referenced somewhere. Are you sure you want to remove this item?",
                "Item referenced",
                JOptionPane.WARNING_MESSAGE,
                JOptionPane.YES_NO_OPTION);
    }

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
     */
    public static void main(String args[]) throws IOException, InvalidFormatException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainFrame().setVisible(true);
            } catch (IOException | InvalidFormatException | TimetableGenerator.NoSuchSubjectException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addTablePopupMenuItem;
    private javax.swing.JMenuItem deleteTablePopupMenuItem;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTable studentsJTable;
    private javax.swing.JPanel studentsPanel;
    private javax.swing.JScrollPane studentsScrollPane;
    private javax.swing.JTable subjectsJTable;
    private javax.swing.JPanel subjectsPanel;
    private javax.swing.JScrollPane subjectsScrollPane;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JTable teachersJTable;
    private javax.swing.JPanel teachersPanel;
    private javax.swing.JScrollPane teachersScrollPane;
    private javax.swing.JPanel timetablePanel;
    // End of variables declaration//GEN-END:variables
}
